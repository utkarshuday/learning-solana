/**
 * This code was AUTOGENERATED using the Codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun Codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  containsBytes,
  fixEncoderSize,
  getBytesEncoder,
  type Address,
  type ReadonlyUint8Array,
} from 'gill';
import { type ParsedInitializeInstruction } from '../instructions';

export const STAKING_PROGRAM_ADDRESS =
  '3vtpaGR9RyXS8QCpkGB9AvtDCmhEAUFZsH7joVSA2mjx' as Address<'3vtpaGR9RyXS8QCpkGB9AvtDCmhEAUFZsH7joVSA2mjx'>;

export enum StakingInstruction {
  Initialize,
}

export function identifyStakingInstruction(
  instruction: { data: ReadonlyUint8Array } | ReadonlyUint8Array
): StakingInstruction {
  const data = 'data' in instruction ? instruction.data : instruction;
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([175, 175, 109, 31, 13, 152, 155, 237])
      ),
      0
    )
  ) {
    return StakingInstruction.Initialize;
  }
  throw new Error(
    'The provided instruction could not be identified as a staking instruction.'
  );
}

export type ParsedStakingInstruction<
  TProgram extends string = '3vtpaGR9RyXS8QCpkGB9AvtDCmhEAUFZsH7joVSA2mjx',
> = {
  instructionType: StakingInstruction.Initialize;
} & ParsedInitializeInstruction<TProgram>;
