/**
 * This code was AUTOGENERATED using the Codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun Codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  addDecoderSizePrefix,
  addEncoderSizePrefix,
  combineCodec,
  fixDecoderSize,
  fixEncoderSize,
  getAddressEncoder,
  getBytesDecoder,
  getBytesEncoder,
  getProgramDerivedAddress,
  getStructDecoder,
  getStructEncoder,
  getU32Decoder,
  getU32Encoder,
  getU64Decoder,
  getU64Encoder,
  getUtf8Decoder,
  getUtf8Encoder,
  transformEncoder,
  type AccountMeta,
  type AccountSignerMeta,
  type Address,
  type Codec,
  type Decoder,
  type Encoder,
  type Instruction,
  type InstructionWithAccounts,
  type InstructionWithData,
  type ReadonlyAccount,
  type ReadonlyUint8Array,
  type TransactionSigner,
  type WritableAccount,
  type WritableSignerAccount,
} from 'gill';
import { VESTING_PROGRAM_ADDRESS } from '../programs';
import {
  expectAddress,
  expectSome,
  getAccountMetaFactory,
  type ResolvedAccount,
} from '../shared';

export const CREATE_VESTING_DISCRIMINATOR = new Uint8Array([
  135, 184, 171, 156, 197, 162, 246, 44,
]);

export function getCreateVestingDiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 8).encode(
    CREATE_VESTING_DISCRIMINATOR
  );
}

export type CreateVestingInstruction<
  TProgram extends string = typeof VESTING_PROGRAM_ADDRESS,
  TAccountSystemProgram extends
    | string
    | AccountMeta<string> = '11111111111111111111111111111111',
  TAccountTokenProgram extends
    | string
    | AccountMeta<string> = 'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA',
  TAccountAssociatedTokenProgram extends
    | string
    | AccountMeta<string> = 'ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL',
  TAccountSigner extends string | AccountMeta<string> = string,
  TAccountVestingAccount extends string | AccountMeta<string> = string,
  TAccountMint extends string | AccountMeta<string> = string,
  TAccountTreasuryTokenAccount extends string | AccountMeta<string> = string,
  TRemainingAccounts extends readonly AccountMeta<string>[] = [],
> = Instruction<TProgram> &
  InstructionWithData<ReadonlyUint8Array> &
  InstructionWithAccounts<
    [
      TAccountSystemProgram extends string
        ? ReadonlyAccount<TAccountSystemProgram>
        : TAccountSystemProgram,
      TAccountTokenProgram extends string
        ? ReadonlyAccount<TAccountTokenProgram>
        : TAccountTokenProgram,
      TAccountAssociatedTokenProgram extends string
        ? ReadonlyAccount<TAccountAssociatedTokenProgram>
        : TAccountAssociatedTokenProgram,
      TAccountSigner extends string
        ? WritableSignerAccount<TAccountSigner> &
            AccountSignerMeta<TAccountSigner>
        : TAccountSigner,
      TAccountVestingAccount extends string
        ? WritableAccount<TAccountVestingAccount>
        : TAccountVestingAccount,
      TAccountMint extends string
        ? ReadonlyAccount<TAccountMint>
        : TAccountMint,
      TAccountTreasuryTokenAccount extends string
        ? WritableAccount<TAccountTreasuryTokenAccount>
        : TAccountTreasuryTokenAccount,
      ...TRemainingAccounts,
    ]
  >;

export type CreateVestingInstructionData = {
  discriminator: ReadonlyUint8Array;
  companyId: bigint;
  companyName: string;
};

export type CreateVestingInstructionDataArgs = {
  companyId: number | bigint;
  companyName: string;
};

export function getCreateVestingInstructionDataEncoder(): Encoder<CreateVestingInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([
      ['discriminator', fixEncoderSize(getBytesEncoder(), 8)],
      ['companyId', getU64Encoder()],
      ['companyName', addEncoderSizePrefix(getUtf8Encoder(), getU32Encoder())],
    ]),
    (value) => ({ ...value, discriminator: CREATE_VESTING_DISCRIMINATOR })
  );
}

export function getCreateVestingInstructionDataDecoder(): Decoder<CreateVestingInstructionData> {
  return getStructDecoder([
    ['discriminator', fixDecoderSize(getBytesDecoder(), 8)],
    ['companyId', getU64Decoder()],
    ['companyName', addDecoderSizePrefix(getUtf8Decoder(), getU32Decoder())],
  ]);
}

export function getCreateVestingInstructionDataCodec(): Codec<
  CreateVestingInstructionDataArgs,
  CreateVestingInstructionData
> {
  return combineCodec(
    getCreateVestingInstructionDataEncoder(),
    getCreateVestingInstructionDataDecoder()
  );
}

export type CreateVestingAsyncInput<
  TAccountSystemProgram extends string = string,
  TAccountTokenProgram extends string = string,
  TAccountAssociatedTokenProgram extends string = string,
  TAccountSigner extends string = string,
  TAccountVestingAccount extends string = string,
  TAccountMint extends string = string,
  TAccountTreasuryTokenAccount extends string = string,
> = {
  systemProgram?: Address<TAccountSystemProgram>;
  tokenProgram?: Address<TAccountTokenProgram>;
  associatedTokenProgram?: Address<TAccountAssociatedTokenProgram>;
  signer: TransactionSigner<TAccountSigner>;
  vestingAccount?: Address<TAccountVestingAccount>;
  mint: Address<TAccountMint>;
  treasuryTokenAccount?: Address<TAccountTreasuryTokenAccount>;
  companyId: CreateVestingInstructionDataArgs['companyId'];
  companyName: CreateVestingInstructionDataArgs['companyName'];
};

export async function getCreateVestingInstructionAsync<
  TAccountSystemProgram extends string,
  TAccountTokenProgram extends string,
  TAccountAssociatedTokenProgram extends string,
  TAccountSigner extends string,
  TAccountVestingAccount extends string,
  TAccountMint extends string,
  TAccountTreasuryTokenAccount extends string,
  TProgramAddress extends Address = typeof VESTING_PROGRAM_ADDRESS,
>(
  input: CreateVestingAsyncInput<
    TAccountSystemProgram,
    TAccountTokenProgram,
    TAccountAssociatedTokenProgram,
    TAccountSigner,
    TAccountVestingAccount,
    TAccountMint,
    TAccountTreasuryTokenAccount
  >,
  config?: { programAddress?: TProgramAddress }
): Promise<
  CreateVestingInstruction<
    TProgramAddress,
    TAccountSystemProgram,
    TAccountTokenProgram,
    TAccountAssociatedTokenProgram,
    TAccountSigner,
    TAccountVestingAccount,
    TAccountMint,
    TAccountTreasuryTokenAccount
  >
> {
  // Program address.
  const programAddress = config?.programAddress ?? VESTING_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    systemProgram: { value: input.systemProgram ?? null, isWritable: false },
    tokenProgram: { value: input.tokenProgram ?? null, isWritable: false },
    associatedTokenProgram: {
      value: input.associatedTokenProgram ?? null,
      isWritable: false,
    },
    signer: { value: input.signer ?? null, isWritable: true },
    vestingAccount: { value: input.vestingAccount ?? null, isWritable: true },
    mint: { value: input.mint ?? null, isWritable: false },
    treasuryTokenAccount: {
      value: input.treasuryTokenAccount ?? null,
      isWritable: true,
    },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input };

  // Resolve default values.
  if (!accounts.systemProgram.value) {
    accounts.systemProgram.value =
      '11111111111111111111111111111111' as Address<'11111111111111111111111111111111'>;
  }
  if (!accounts.tokenProgram.value) {
    accounts.tokenProgram.value =
      'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA' as Address<'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA'>;
  }
  if (!accounts.associatedTokenProgram.value) {
    accounts.associatedTokenProgram.value =
      'ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL' as Address<'ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL'>;
  }
  if (!accounts.vestingAccount.value) {
    accounts.vestingAccount.value = await getProgramDerivedAddress({
      programAddress,
      seeds: [
        getBytesEncoder().encode(
          new Uint8Array([118, 101, 115, 116, 105, 110, 103])
        ),
        getU64Encoder().encode(expectSome(args.companyId)),
      ],
    });
  }
  if (!accounts.treasuryTokenAccount.value) {
    accounts.treasuryTokenAccount.value = await getProgramDerivedAddress({
      programAddress:
        'ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL' as Address<'ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL'>,
      seeds: [
        getAddressEncoder().encode(
          expectAddress(accounts.vestingAccount.value)
        ),
        getAddressEncoder().encode(expectAddress(accounts.tokenProgram.value)),
        getAddressEncoder().encode(expectAddress(accounts.mint.value)),
      ],
    });
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  return Object.freeze({
    accounts: [
      getAccountMeta(accounts.systemProgram),
      getAccountMeta(accounts.tokenProgram),
      getAccountMeta(accounts.associatedTokenProgram),
      getAccountMeta(accounts.signer),
      getAccountMeta(accounts.vestingAccount),
      getAccountMeta(accounts.mint),
      getAccountMeta(accounts.treasuryTokenAccount),
    ],
    data: getCreateVestingInstructionDataEncoder().encode(
      args as CreateVestingInstructionDataArgs
    ),
    programAddress,
  } as CreateVestingInstruction<
    TProgramAddress,
    TAccountSystemProgram,
    TAccountTokenProgram,
    TAccountAssociatedTokenProgram,
    TAccountSigner,
    TAccountVestingAccount,
    TAccountMint,
    TAccountTreasuryTokenAccount
  >);
}

export type CreateVestingInput<
  TAccountSystemProgram extends string = string,
  TAccountTokenProgram extends string = string,
  TAccountAssociatedTokenProgram extends string = string,
  TAccountSigner extends string = string,
  TAccountVestingAccount extends string = string,
  TAccountMint extends string = string,
  TAccountTreasuryTokenAccount extends string = string,
> = {
  systemProgram?: Address<TAccountSystemProgram>;
  tokenProgram?: Address<TAccountTokenProgram>;
  associatedTokenProgram?: Address<TAccountAssociatedTokenProgram>;
  signer: TransactionSigner<TAccountSigner>;
  vestingAccount: Address<TAccountVestingAccount>;
  mint: Address<TAccountMint>;
  treasuryTokenAccount: Address<TAccountTreasuryTokenAccount>;
  companyId: CreateVestingInstructionDataArgs['companyId'];
  companyName: CreateVestingInstructionDataArgs['companyName'];
};

export function getCreateVestingInstruction<
  TAccountSystemProgram extends string,
  TAccountTokenProgram extends string,
  TAccountAssociatedTokenProgram extends string,
  TAccountSigner extends string,
  TAccountVestingAccount extends string,
  TAccountMint extends string,
  TAccountTreasuryTokenAccount extends string,
  TProgramAddress extends Address = typeof VESTING_PROGRAM_ADDRESS,
>(
  input: CreateVestingInput<
    TAccountSystemProgram,
    TAccountTokenProgram,
    TAccountAssociatedTokenProgram,
    TAccountSigner,
    TAccountVestingAccount,
    TAccountMint,
    TAccountTreasuryTokenAccount
  >,
  config?: { programAddress?: TProgramAddress }
): CreateVestingInstruction<
  TProgramAddress,
  TAccountSystemProgram,
  TAccountTokenProgram,
  TAccountAssociatedTokenProgram,
  TAccountSigner,
  TAccountVestingAccount,
  TAccountMint,
  TAccountTreasuryTokenAccount
> {
  // Program address.
  const programAddress = config?.programAddress ?? VESTING_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    systemProgram: { value: input.systemProgram ?? null, isWritable: false },
    tokenProgram: { value: input.tokenProgram ?? null, isWritable: false },
    associatedTokenProgram: {
      value: input.associatedTokenProgram ?? null,
      isWritable: false,
    },
    signer: { value: input.signer ?? null, isWritable: true },
    vestingAccount: { value: input.vestingAccount ?? null, isWritable: true },
    mint: { value: input.mint ?? null, isWritable: false },
    treasuryTokenAccount: {
      value: input.treasuryTokenAccount ?? null,
      isWritable: true,
    },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input };

  // Resolve default values.
  if (!accounts.systemProgram.value) {
    accounts.systemProgram.value =
      '11111111111111111111111111111111' as Address<'11111111111111111111111111111111'>;
  }
  if (!accounts.tokenProgram.value) {
    accounts.tokenProgram.value =
      'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA' as Address<'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA'>;
  }
  if (!accounts.associatedTokenProgram.value) {
    accounts.associatedTokenProgram.value =
      'ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL' as Address<'ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL'>;
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  return Object.freeze({
    accounts: [
      getAccountMeta(accounts.systemProgram),
      getAccountMeta(accounts.tokenProgram),
      getAccountMeta(accounts.associatedTokenProgram),
      getAccountMeta(accounts.signer),
      getAccountMeta(accounts.vestingAccount),
      getAccountMeta(accounts.mint),
      getAccountMeta(accounts.treasuryTokenAccount),
    ],
    data: getCreateVestingInstructionDataEncoder().encode(
      args as CreateVestingInstructionDataArgs
    ),
    programAddress,
  } as CreateVestingInstruction<
    TProgramAddress,
    TAccountSystemProgram,
    TAccountTokenProgram,
    TAccountAssociatedTokenProgram,
    TAccountSigner,
    TAccountVestingAccount,
    TAccountMint,
    TAccountTreasuryTokenAccount
  >);
}

export type ParsedCreateVestingInstruction<
  TProgram extends string = typeof VESTING_PROGRAM_ADDRESS,
  TAccountMetas extends readonly AccountMeta[] = readonly AccountMeta[],
> = {
  programAddress: Address<TProgram>;
  accounts: {
    systemProgram: TAccountMetas[0];
    tokenProgram: TAccountMetas[1];
    associatedTokenProgram: TAccountMetas[2];
    signer: TAccountMetas[3];
    vestingAccount: TAccountMetas[4];
    mint: TAccountMetas[5];
    treasuryTokenAccount: TAccountMetas[6];
  };
  data: CreateVestingInstructionData;
};

export function parseCreateVestingInstruction<
  TProgram extends string,
  TAccountMetas extends readonly AccountMeta[],
>(
  instruction: Instruction<TProgram> &
    InstructionWithAccounts<TAccountMetas> &
    InstructionWithData<ReadonlyUint8Array>
): ParsedCreateVestingInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 7) {
    // TODO: Coded error.
    throw new Error('Not enough accounts');
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = (instruction.accounts as TAccountMetas)[accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      systemProgram: getNextAccount(),
      tokenProgram: getNextAccount(),
      associatedTokenProgram: getNextAccount(),
      signer: getNextAccount(),
      vestingAccount: getNextAccount(),
      mint: getNextAccount(),
      treasuryTokenAccount: getNextAccount(),
    },
    data: getCreateVestingInstructionDataDecoder().decode(instruction.data),
  };
}
