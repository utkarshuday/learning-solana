/**
 * This code was AUTOGENERATED using the Codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun Codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  combineCodec,
  fixDecoderSize,
  fixEncoderSize,
  getAddressEncoder,
  getBytesDecoder,
  getBytesEncoder,
  getProgramDerivedAddress,
  getStructDecoder,
  getStructEncoder,
  getU64Decoder,
  getU64Encoder,
  transformEncoder,
  type AccountMeta,
  type AccountSignerMeta,
  type Address,
  type FixedSizeCodec,
  type FixedSizeDecoder,
  type FixedSizeEncoder,
  type Instruction,
  type InstructionWithAccounts,
  type InstructionWithData,
  type ReadonlyAccount,
  type ReadonlyUint8Array,
  type TransactionSigner,
  type WritableAccount,
  type WritableSignerAccount,
} from 'gill';
import { VESTING_PROGRAM_ADDRESS } from '../programs';
import {
  expectAddress,
  expectSome,
  getAccountMetaFactory,
  type ResolvedAccount,
} from '../shared';

export const CLAIM_TOKENS_DISCRIMINATOR = new Uint8Array([
  108, 216, 210, 231, 0, 212, 42, 64,
]);

export function getClaimTokensDiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 8).encode(
    CLAIM_TOKENS_DISCRIMINATOR
  );
}

export type ClaimTokensInstruction<
  TProgram extends string = typeof VESTING_PROGRAM_ADDRESS,
  TAccountSystemProgram extends
    | string
    | AccountMeta<string> = '11111111111111111111111111111111',
  TAccountBeneficiary extends string | AccountMeta<string> = string,
  TAccountAssociatedTokenProgram extends
    | string
    | AccountMeta<string> = 'ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL',
  TAccountTokenProgram extends
    | string
    | AccountMeta<string> = 'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA',
  TAccountMint extends string | AccountMeta<string> = string,
  TAccountBeneficiaryTokenAccount extends string | AccountMeta<string> = string,
  TAccountVestingAccount extends string | AccountMeta<string> = string,
  TAccountEmployeeAccount extends string | AccountMeta<string> = string,
  TAccountTreasuryTokenAccount extends string | AccountMeta<string> = string,
  TAccountEmployeeTokenAccount extends string | AccountMeta<string> = string,
  TRemainingAccounts extends readonly AccountMeta<string>[] = [],
> = Instruction<TProgram> &
  InstructionWithData<ReadonlyUint8Array> &
  InstructionWithAccounts<
    [
      TAccountSystemProgram extends string
        ? ReadonlyAccount<TAccountSystemProgram>
        : TAccountSystemProgram,
      TAccountBeneficiary extends string
        ? WritableSignerAccount<TAccountBeneficiary> &
            AccountSignerMeta<TAccountBeneficiary>
        : TAccountBeneficiary,
      TAccountAssociatedTokenProgram extends string
        ? ReadonlyAccount<TAccountAssociatedTokenProgram>
        : TAccountAssociatedTokenProgram,
      TAccountTokenProgram extends string
        ? ReadonlyAccount<TAccountTokenProgram>
        : TAccountTokenProgram,
      TAccountMint extends string
        ? ReadonlyAccount<TAccountMint>
        : TAccountMint,
      TAccountBeneficiaryTokenAccount extends string
        ? WritableAccount<TAccountBeneficiaryTokenAccount>
        : TAccountBeneficiaryTokenAccount,
      TAccountVestingAccount extends string
        ? ReadonlyAccount<TAccountVestingAccount>
        : TAccountVestingAccount,
      TAccountEmployeeAccount extends string
        ? WritableAccount<TAccountEmployeeAccount>
        : TAccountEmployeeAccount,
      TAccountTreasuryTokenAccount extends string
        ? WritableAccount<TAccountTreasuryTokenAccount>
        : TAccountTreasuryTokenAccount,
      TAccountEmployeeTokenAccount extends string
        ? WritableAccount<TAccountEmployeeTokenAccount>
        : TAccountEmployeeTokenAccount,
      ...TRemainingAccounts,
    ]
  >;

export type ClaimTokensInstructionData = {
  discriminator: ReadonlyUint8Array;
  companyId: bigint;
};

export type ClaimTokensInstructionDataArgs = { companyId: number | bigint };

export function getClaimTokensInstructionDataEncoder(): FixedSizeEncoder<ClaimTokensInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([
      ['discriminator', fixEncoderSize(getBytesEncoder(), 8)],
      ['companyId', getU64Encoder()],
    ]),
    (value) => ({ ...value, discriminator: CLAIM_TOKENS_DISCRIMINATOR })
  );
}

export function getClaimTokensInstructionDataDecoder(): FixedSizeDecoder<ClaimTokensInstructionData> {
  return getStructDecoder([
    ['discriminator', fixDecoderSize(getBytesDecoder(), 8)],
    ['companyId', getU64Decoder()],
  ]);
}

export function getClaimTokensInstructionDataCodec(): FixedSizeCodec<
  ClaimTokensInstructionDataArgs,
  ClaimTokensInstructionData
> {
  return combineCodec(
    getClaimTokensInstructionDataEncoder(),
    getClaimTokensInstructionDataDecoder()
  );
}

export type ClaimTokensAsyncInput<
  TAccountSystemProgram extends string = string,
  TAccountBeneficiary extends string = string,
  TAccountAssociatedTokenProgram extends string = string,
  TAccountTokenProgram extends string = string,
  TAccountMint extends string = string,
  TAccountBeneficiaryTokenAccount extends string = string,
  TAccountVestingAccount extends string = string,
  TAccountEmployeeAccount extends string = string,
  TAccountTreasuryTokenAccount extends string = string,
  TAccountEmployeeTokenAccount extends string = string,
> = {
  systemProgram?: Address<TAccountSystemProgram>;
  beneficiary: TransactionSigner<TAccountBeneficiary>;
  associatedTokenProgram?: Address<TAccountAssociatedTokenProgram>;
  tokenProgram?: Address<TAccountTokenProgram>;
  mint: Address<TAccountMint>;
  beneficiaryTokenAccount?: Address<TAccountBeneficiaryTokenAccount>;
  vestingAccount?: Address<TAccountVestingAccount>;
  employeeAccount?: Address<TAccountEmployeeAccount>;
  treasuryTokenAccount?: Address<TAccountTreasuryTokenAccount>;
  employeeTokenAccount?: Address<TAccountEmployeeTokenAccount>;
  companyId: ClaimTokensInstructionDataArgs['companyId'];
};

export async function getClaimTokensInstructionAsync<
  TAccountSystemProgram extends string,
  TAccountBeneficiary extends string,
  TAccountAssociatedTokenProgram extends string,
  TAccountTokenProgram extends string,
  TAccountMint extends string,
  TAccountBeneficiaryTokenAccount extends string,
  TAccountVestingAccount extends string,
  TAccountEmployeeAccount extends string,
  TAccountTreasuryTokenAccount extends string,
  TAccountEmployeeTokenAccount extends string,
  TProgramAddress extends Address = typeof VESTING_PROGRAM_ADDRESS,
>(
  input: ClaimTokensAsyncInput<
    TAccountSystemProgram,
    TAccountBeneficiary,
    TAccountAssociatedTokenProgram,
    TAccountTokenProgram,
    TAccountMint,
    TAccountBeneficiaryTokenAccount,
    TAccountVestingAccount,
    TAccountEmployeeAccount,
    TAccountTreasuryTokenAccount,
    TAccountEmployeeTokenAccount
  >,
  config?: { programAddress?: TProgramAddress }
): Promise<
  ClaimTokensInstruction<
    TProgramAddress,
    TAccountSystemProgram,
    TAccountBeneficiary,
    TAccountAssociatedTokenProgram,
    TAccountTokenProgram,
    TAccountMint,
    TAccountBeneficiaryTokenAccount,
    TAccountVestingAccount,
    TAccountEmployeeAccount,
    TAccountTreasuryTokenAccount,
    TAccountEmployeeTokenAccount
  >
> {
  // Program address.
  const programAddress = config?.programAddress ?? VESTING_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    systemProgram: { value: input.systemProgram ?? null, isWritable: false },
    beneficiary: { value: input.beneficiary ?? null, isWritable: true },
    associatedTokenProgram: {
      value: input.associatedTokenProgram ?? null,
      isWritable: false,
    },
    tokenProgram: { value: input.tokenProgram ?? null, isWritable: false },
    mint: { value: input.mint ?? null, isWritable: false },
    beneficiaryTokenAccount: {
      value: input.beneficiaryTokenAccount ?? null,
      isWritable: true,
    },
    vestingAccount: { value: input.vestingAccount ?? null, isWritable: false },
    employeeAccount: { value: input.employeeAccount ?? null, isWritable: true },
    treasuryTokenAccount: {
      value: input.treasuryTokenAccount ?? null,
      isWritable: true,
    },
    employeeTokenAccount: {
      value: input.employeeTokenAccount ?? null,
      isWritable: true,
    },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input };

  // Resolve default values.
  if (!accounts.systemProgram.value) {
    accounts.systemProgram.value =
      '11111111111111111111111111111111' as Address<'11111111111111111111111111111111'>;
  }
  if (!accounts.associatedTokenProgram.value) {
    accounts.associatedTokenProgram.value =
      'ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL' as Address<'ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL'>;
  }
  if (!accounts.tokenProgram.value) {
    accounts.tokenProgram.value =
      'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA' as Address<'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA'>;
  }
  if (!accounts.beneficiaryTokenAccount.value) {
    accounts.beneficiaryTokenAccount.value = await getProgramDerivedAddress({
      programAddress:
        'ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL' as Address<'ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL'>,
      seeds: [
        getAddressEncoder().encode(expectAddress(accounts.beneficiary.value)),
        getAddressEncoder().encode(expectAddress(accounts.tokenProgram.value)),
        getAddressEncoder().encode(expectAddress(accounts.mint.value)),
      ],
    });
  }
  if (!accounts.vestingAccount.value) {
    accounts.vestingAccount.value = await getProgramDerivedAddress({
      programAddress,
      seeds: [
        getBytesEncoder().encode(
          new Uint8Array([118, 101, 115, 116, 105, 110, 103])
        ),
        getU64Encoder().encode(expectSome(args.companyId)),
      ],
    });
  }
  if (!accounts.employeeAccount.value) {
    accounts.employeeAccount.value = await getProgramDerivedAddress({
      programAddress,
      seeds: [
        getBytesEncoder().encode(
          new Uint8Array([101, 109, 112, 108, 111, 121, 101, 101])
        ),
        getAddressEncoder().encode(
          expectAddress(accounts.vestingAccount.value)
        ),
        getAddressEncoder().encode(expectAddress(accounts.beneficiary.value)),
      ],
    });
  }
  if (!accounts.treasuryTokenAccount.value) {
    accounts.treasuryTokenAccount.value = await getProgramDerivedAddress({
      programAddress:
        'ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL' as Address<'ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL'>,
      seeds: [
        getAddressEncoder().encode(
          expectAddress(accounts.vestingAccount.value)
        ),
        getAddressEncoder().encode(expectAddress(accounts.tokenProgram.value)),
        getAddressEncoder().encode(expectAddress(accounts.mint.value)),
      ],
    });
  }
  if (!accounts.employeeTokenAccount.value) {
    accounts.employeeTokenAccount.value = await getProgramDerivedAddress({
      programAddress:
        'ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL' as Address<'ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL'>,
      seeds: [
        getAddressEncoder().encode(expectAddress(accounts.beneficiary.value)),
        getAddressEncoder().encode(expectAddress(accounts.tokenProgram.value)),
        getAddressEncoder().encode(expectAddress(accounts.mint.value)),
      ],
    });
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  return Object.freeze({
    accounts: [
      getAccountMeta(accounts.systemProgram),
      getAccountMeta(accounts.beneficiary),
      getAccountMeta(accounts.associatedTokenProgram),
      getAccountMeta(accounts.tokenProgram),
      getAccountMeta(accounts.mint),
      getAccountMeta(accounts.beneficiaryTokenAccount),
      getAccountMeta(accounts.vestingAccount),
      getAccountMeta(accounts.employeeAccount),
      getAccountMeta(accounts.treasuryTokenAccount),
      getAccountMeta(accounts.employeeTokenAccount),
    ],
    data: getClaimTokensInstructionDataEncoder().encode(
      args as ClaimTokensInstructionDataArgs
    ),
    programAddress,
  } as ClaimTokensInstruction<
    TProgramAddress,
    TAccountSystemProgram,
    TAccountBeneficiary,
    TAccountAssociatedTokenProgram,
    TAccountTokenProgram,
    TAccountMint,
    TAccountBeneficiaryTokenAccount,
    TAccountVestingAccount,
    TAccountEmployeeAccount,
    TAccountTreasuryTokenAccount,
    TAccountEmployeeTokenAccount
  >);
}

export type ClaimTokensInput<
  TAccountSystemProgram extends string = string,
  TAccountBeneficiary extends string = string,
  TAccountAssociatedTokenProgram extends string = string,
  TAccountTokenProgram extends string = string,
  TAccountMint extends string = string,
  TAccountBeneficiaryTokenAccount extends string = string,
  TAccountVestingAccount extends string = string,
  TAccountEmployeeAccount extends string = string,
  TAccountTreasuryTokenAccount extends string = string,
  TAccountEmployeeTokenAccount extends string = string,
> = {
  systemProgram?: Address<TAccountSystemProgram>;
  beneficiary: TransactionSigner<TAccountBeneficiary>;
  associatedTokenProgram?: Address<TAccountAssociatedTokenProgram>;
  tokenProgram?: Address<TAccountTokenProgram>;
  mint: Address<TAccountMint>;
  beneficiaryTokenAccount: Address<TAccountBeneficiaryTokenAccount>;
  vestingAccount: Address<TAccountVestingAccount>;
  employeeAccount: Address<TAccountEmployeeAccount>;
  treasuryTokenAccount: Address<TAccountTreasuryTokenAccount>;
  employeeTokenAccount: Address<TAccountEmployeeTokenAccount>;
  companyId: ClaimTokensInstructionDataArgs['companyId'];
};

export function getClaimTokensInstruction<
  TAccountSystemProgram extends string,
  TAccountBeneficiary extends string,
  TAccountAssociatedTokenProgram extends string,
  TAccountTokenProgram extends string,
  TAccountMint extends string,
  TAccountBeneficiaryTokenAccount extends string,
  TAccountVestingAccount extends string,
  TAccountEmployeeAccount extends string,
  TAccountTreasuryTokenAccount extends string,
  TAccountEmployeeTokenAccount extends string,
  TProgramAddress extends Address = typeof VESTING_PROGRAM_ADDRESS,
>(
  input: ClaimTokensInput<
    TAccountSystemProgram,
    TAccountBeneficiary,
    TAccountAssociatedTokenProgram,
    TAccountTokenProgram,
    TAccountMint,
    TAccountBeneficiaryTokenAccount,
    TAccountVestingAccount,
    TAccountEmployeeAccount,
    TAccountTreasuryTokenAccount,
    TAccountEmployeeTokenAccount
  >,
  config?: { programAddress?: TProgramAddress }
): ClaimTokensInstruction<
  TProgramAddress,
  TAccountSystemProgram,
  TAccountBeneficiary,
  TAccountAssociatedTokenProgram,
  TAccountTokenProgram,
  TAccountMint,
  TAccountBeneficiaryTokenAccount,
  TAccountVestingAccount,
  TAccountEmployeeAccount,
  TAccountTreasuryTokenAccount,
  TAccountEmployeeTokenAccount
> {
  // Program address.
  const programAddress = config?.programAddress ?? VESTING_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    systemProgram: { value: input.systemProgram ?? null, isWritable: false },
    beneficiary: { value: input.beneficiary ?? null, isWritable: true },
    associatedTokenProgram: {
      value: input.associatedTokenProgram ?? null,
      isWritable: false,
    },
    tokenProgram: { value: input.tokenProgram ?? null, isWritable: false },
    mint: { value: input.mint ?? null, isWritable: false },
    beneficiaryTokenAccount: {
      value: input.beneficiaryTokenAccount ?? null,
      isWritable: true,
    },
    vestingAccount: { value: input.vestingAccount ?? null, isWritable: false },
    employeeAccount: { value: input.employeeAccount ?? null, isWritable: true },
    treasuryTokenAccount: {
      value: input.treasuryTokenAccount ?? null,
      isWritable: true,
    },
    employeeTokenAccount: {
      value: input.employeeTokenAccount ?? null,
      isWritable: true,
    },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input };

  // Resolve default values.
  if (!accounts.systemProgram.value) {
    accounts.systemProgram.value =
      '11111111111111111111111111111111' as Address<'11111111111111111111111111111111'>;
  }
  if (!accounts.associatedTokenProgram.value) {
    accounts.associatedTokenProgram.value =
      'ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL' as Address<'ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL'>;
  }
  if (!accounts.tokenProgram.value) {
    accounts.tokenProgram.value =
      'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA' as Address<'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA'>;
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  return Object.freeze({
    accounts: [
      getAccountMeta(accounts.systemProgram),
      getAccountMeta(accounts.beneficiary),
      getAccountMeta(accounts.associatedTokenProgram),
      getAccountMeta(accounts.tokenProgram),
      getAccountMeta(accounts.mint),
      getAccountMeta(accounts.beneficiaryTokenAccount),
      getAccountMeta(accounts.vestingAccount),
      getAccountMeta(accounts.employeeAccount),
      getAccountMeta(accounts.treasuryTokenAccount),
      getAccountMeta(accounts.employeeTokenAccount),
    ],
    data: getClaimTokensInstructionDataEncoder().encode(
      args as ClaimTokensInstructionDataArgs
    ),
    programAddress,
  } as ClaimTokensInstruction<
    TProgramAddress,
    TAccountSystemProgram,
    TAccountBeneficiary,
    TAccountAssociatedTokenProgram,
    TAccountTokenProgram,
    TAccountMint,
    TAccountBeneficiaryTokenAccount,
    TAccountVestingAccount,
    TAccountEmployeeAccount,
    TAccountTreasuryTokenAccount,
    TAccountEmployeeTokenAccount
  >);
}

export type ParsedClaimTokensInstruction<
  TProgram extends string = typeof VESTING_PROGRAM_ADDRESS,
  TAccountMetas extends readonly AccountMeta[] = readonly AccountMeta[],
> = {
  programAddress: Address<TProgram>;
  accounts: {
    systemProgram: TAccountMetas[0];
    beneficiary: TAccountMetas[1];
    associatedTokenProgram: TAccountMetas[2];
    tokenProgram: TAccountMetas[3];
    mint: TAccountMetas[4];
    beneficiaryTokenAccount: TAccountMetas[5];
    vestingAccount: TAccountMetas[6];
    employeeAccount: TAccountMetas[7];
    treasuryTokenAccount: TAccountMetas[8];
    employeeTokenAccount: TAccountMetas[9];
  };
  data: ClaimTokensInstructionData;
};

export function parseClaimTokensInstruction<
  TProgram extends string,
  TAccountMetas extends readonly AccountMeta[],
>(
  instruction: Instruction<TProgram> &
    InstructionWithAccounts<TAccountMetas> &
    InstructionWithData<ReadonlyUint8Array>
): ParsedClaimTokensInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 10) {
    // TODO: Coded error.
    throw new Error('Not enough accounts');
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = (instruction.accounts as TAccountMetas)[accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      systemProgram: getNextAccount(),
      beneficiary: getNextAccount(),
      associatedTokenProgram: getNextAccount(),
      tokenProgram: getNextAccount(),
      mint: getNextAccount(),
      beneficiaryTokenAccount: getNextAccount(),
      vestingAccount: getNextAccount(),
      employeeAccount: getNextAccount(),
      treasuryTokenAccount: getNextAccount(),
      employeeTokenAccount: getNextAccount(),
    },
    data: getClaimTokensInstructionDataDecoder().decode(instruction.data),
  };
}
