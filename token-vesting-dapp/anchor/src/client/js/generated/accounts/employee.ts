/**
 * This code was AUTOGENERATED using the Codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun Codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  assertAccountExists,
  assertAccountsExist,
  combineCodec,
  decodeAccount,
  fetchEncodedAccount,
  fetchEncodedAccounts,
  fixDecoderSize,
  fixEncoderSize,
  getAddressDecoder,
  getAddressEncoder,
  getBytesDecoder,
  getBytesEncoder,
  getI64Decoder,
  getI64Encoder,
  getStructDecoder,
  getStructEncoder,
  getU64Decoder,
  getU64Encoder,
  getU8Decoder,
  getU8Encoder,
  transformEncoder,
  type Account,
  type Address,
  type EncodedAccount,
  type FetchAccountConfig,
  type FetchAccountsConfig,
  type FixedSizeCodec,
  type FixedSizeDecoder,
  type FixedSizeEncoder,
  type MaybeAccount,
  type MaybeEncodedAccount,
  type ReadonlyUint8Array,
} from 'gill';

export const EMPLOYEE_DISCRIMINATOR = new Uint8Array([
  98, 238, 61, 252, 130, 77, 105, 67,
]);

export function getEmployeeDiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 8).encode(EMPLOYEE_DISCRIMINATOR);
}

export type Employee = {
  discriminator: ReadonlyUint8Array;
  beneficiary: Address;
  startTime: bigint;
  endTime: bigint;
  cliffTime: bigint;
  vestingAccount: Address;
  totalAmount: bigint;
  totalWithdrawn: bigint;
  bump: number;
};

export type EmployeeArgs = {
  beneficiary: Address;
  startTime: number | bigint;
  endTime: number | bigint;
  cliffTime: number | bigint;
  vestingAccount: Address;
  totalAmount: number | bigint;
  totalWithdrawn: number | bigint;
  bump: number;
};

export function getEmployeeEncoder(): FixedSizeEncoder<EmployeeArgs> {
  return transformEncoder(
    getStructEncoder([
      ['discriminator', fixEncoderSize(getBytesEncoder(), 8)],
      ['beneficiary', getAddressEncoder()],
      ['startTime', getI64Encoder()],
      ['endTime', getI64Encoder()],
      ['cliffTime', getI64Encoder()],
      ['vestingAccount', getAddressEncoder()],
      ['totalAmount', getU64Encoder()],
      ['totalWithdrawn', getU64Encoder()],
      ['bump', getU8Encoder()],
    ]),
    (value) => ({ ...value, discriminator: EMPLOYEE_DISCRIMINATOR })
  );
}

export function getEmployeeDecoder(): FixedSizeDecoder<Employee> {
  return getStructDecoder([
    ['discriminator', fixDecoderSize(getBytesDecoder(), 8)],
    ['beneficiary', getAddressDecoder()],
    ['startTime', getI64Decoder()],
    ['endTime', getI64Decoder()],
    ['cliffTime', getI64Decoder()],
    ['vestingAccount', getAddressDecoder()],
    ['totalAmount', getU64Decoder()],
    ['totalWithdrawn', getU64Decoder()],
    ['bump', getU8Decoder()],
  ]);
}

export function getEmployeeCodec(): FixedSizeCodec<EmployeeArgs, Employee> {
  return combineCodec(getEmployeeEncoder(), getEmployeeDecoder());
}

export function decodeEmployee<TAddress extends string = string>(
  encodedAccount: EncodedAccount<TAddress>
): Account<Employee, TAddress>;
export function decodeEmployee<TAddress extends string = string>(
  encodedAccount: MaybeEncodedAccount<TAddress>
): MaybeAccount<Employee, TAddress>;
export function decodeEmployee<TAddress extends string = string>(
  encodedAccount: EncodedAccount<TAddress> | MaybeEncodedAccount<TAddress>
): Account<Employee, TAddress> | MaybeAccount<Employee, TAddress> {
  return decodeAccount(
    encodedAccount as MaybeEncodedAccount<TAddress>,
    getEmployeeDecoder()
  );
}

export async function fetchEmployee<TAddress extends string = string>(
  rpc: Parameters<typeof fetchEncodedAccount>[0],
  address: Address<TAddress>,
  config?: FetchAccountConfig
): Promise<Account<Employee, TAddress>> {
  const maybeAccount = await fetchMaybeEmployee(rpc, address, config);
  assertAccountExists(maybeAccount);
  return maybeAccount;
}

export async function fetchMaybeEmployee<TAddress extends string = string>(
  rpc: Parameters<typeof fetchEncodedAccount>[0],
  address: Address<TAddress>,
  config?: FetchAccountConfig
): Promise<MaybeAccount<Employee, TAddress>> {
  const maybeAccount = await fetchEncodedAccount(rpc, address, config);
  return decodeEmployee(maybeAccount);
}

export async function fetchAllEmployee(
  rpc: Parameters<typeof fetchEncodedAccounts>[0],
  addresses: Array<Address>,
  config?: FetchAccountsConfig
): Promise<Account<Employee>[]> {
  const maybeAccounts = await fetchAllMaybeEmployee(rpc, addresses, config);
  assertAccountsExist(maybeAccounts);
  return maybeAccounts;
}

export async function fetchAllMaybeEmployee(
  rpc: Parameters<typeof fetchEncodedAccounts>[0],
  addresses: Array<Address>,
  config?: FetchAccountsConfig
): Promise<MaybeAccount<Employee>[]> {
  const maybeAccounts = await fetchEncodedAccounts(rpc, addresses, config);
  return maybeAccounts.map((maybeAccount) => decodeEmployee(maybeAccount));
}

export function getEmployeeSize(): number {
  return 113;
}
