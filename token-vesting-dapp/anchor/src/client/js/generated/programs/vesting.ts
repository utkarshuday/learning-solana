/**
 * This code was AUTOGENERATED using the Codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun Codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  containsBytes,
  fixEncoderSize,
  getBytesEncoder,
  type Address,
  type ReadonlyUint8Array,
} from 'gill';
import {
  type ParsedClaimTokensInstruction,
  type ParsedCreateEmployeeInstruction,
  type ParsedCreateVestingInstruction,
} from '../instructions';

export const VESTING_PROGRAM_ADDRESS =
  '5wQXgugM9ch9r6VFUDEsZHC5gajURZye8x2mAAW9kaE1' as Address<'5wQXgugM9ch9r6VFUDEsZHC5gajURZye8x2mAAW9kaE1'>;

export enum VestingAccount {
  Employee,
  Vesting,
}

export function identifyVestingAccount(
  account: { data: ReadonlyUint8Array } | ReadonlyUint8Array
): VestingAccount {
  const data = 'data' in account ? account.data : account;
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([98, 238, 61, 252, 130, 77, 105, 67])
      ),
      0
    )
  ) {
    return VestingAccount.Employee;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([100, 149, 66, 138, 95, 200, 128, 241])
      ),
      0
    )
  ) {
    return VestingAccount.Vesting;
  }
  throw new Error(
    'The provided account could not be identified as a vesting account.'
  );
}

export enum VestingInstruction {
  ClaimTokens,
  CreateEmployee,
  CreateVesting,
}

export function identifyVestingInstruction(
  instruction: { data: ReadonlyUint8Array } | ReadonlyUint8Array
): VestingInstruction {
  const data = 'data' in instruction ? instruction.data : instruction;
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([108, 216, 210, 231, 0, 212, 42, 64])
      ),
      0
    )
  ) {
    return VestingInstruction.ClaimTokens;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([87, 175, 18, 124, 24, 81, 207, 40])
      ),
      0
    )
  ) {
    return VestingInstruction.CreateEmployee;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([135, 184, 171, 156, 197, 162, 246, 44])
      ),
      0
    )
  ) {
    return VestingInstruction.CreateVesting;
  }
  throw new Error(
    'The provided instruction could not be identified as a vesting instruction.'
  );
}

export type ParsedVestingInstruction<
  TProgram extends string = '5wQXgugM9ch9r6VFUDEsZHC5gajURZye8x2mAAW9kaE1',
> =
  | ({
      instructionType: VestingInstruction.ClaimTokens;
    } & ParsedClaimTokensInstruction<TProgram>)
  | ({
      instructionType: VestingInstruction.CreateEmployee;
    } & ParsedCreateEmployeeInstruction<TProgram>)
  | ({
      instructionType: VestingInstruction.CreateVesting;
    } & ParsedCreateVestingInstruction<TProgram>);
