/**
 * This code was AUTOGENERATED using the Codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun Codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  containsBytes,
  fixEncoderSize,
  getBytesEncoder,
  type Address,
  type ReadonlyUint8Array,
} from 'gill';
import {
  type ParsedCastVoteInstruction,
  type ParsedInitializeCandidateInstruction,
  type ParsedInitializePollInstruction,
} from '../instructions';

export const VOTING_PROGRAM_ADDRESS =
  '3L83r9ehAY1YsGGeYjaChFyQufXDvHW9NMrNeV7vopxi' as Address<'3L83r9ehAY1YsGGeYjaChFyQufXDvHW9NMrNeV7vopxi'>;

export enum VotingAccount {
  Candidate,
  Poll,
  Vote,
}

export function identifyVotingAccount(
  account: { data: ReadonlyUint8Array } | ReadonlyUint8Array
): VotingAccount {
  const data = 'data' in account ? account.data : account;
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([86, 69, 250, 96, 193, 10, 222, 123])
      ),
      0
    )
  ) {
    return VotingAccount.Candidate;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([110, 234, 167, 188, 231, 136, 153, 111])
      ),
      0
    )
  ) {
    return VotingAccount.Poll;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([96, 91, 104, 57, 145, 35, 172, 155])
      ),
      0
    )
  ) {
    return VotingAccount.Vote;
  }
  throw new Error(
    'The provided account could not be identified as a voting account.'
  );
}

export enum VotingInstruction {
  CastVote,
  InitializeCandidate,
  InitializePoll,
}

export function identifyVotingInstruction(
  instruction: { data: ReadonlyUint8Array } | ReadonlyUint8Array
): VotingInstruction {
  const data = 'data' in instruction ? instruction.data : instruction;
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([20, 212, 15, 189, 69, 180, 69, 151])
      ),
      0
    )
  ) {
    return VotingInstruction.CastVote;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([210, 107, 118, 204, 255, 97, 112, 26])
      ),
      0
    )
  ) {
    return VotingInstruction.InitializeCandidate;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([193, 22, 99, 197, 18, 33, 115, 117])
      ),
      0
    )
  ) {
    return VotingInstruction.InitializePoll;
  }
  throw new Error(
    'The provided instruction could not be identified as a voting instruction.'
  );
}

export type ParsedVotingInstruction<
  TProgram extends string = '3L83r9ehAY1YsGGeYjaChFyQufXDvHW9NMrNeV7vopxi',
> =
  | ({
      instructionType: VotingInstruction.CastVote;
    } & ParsedCastVoteInstruction<TProgram>)
  | ({
      instructionType: VotingInstruction.InitializeCandidate;
    } & ParsedInitializeCandidateInstruction<TProgram>)
  | ({
      instructionType: VotingInstruction.InitializePoll;
    } & ParsedInitializePollInstruction<TProgram>);
