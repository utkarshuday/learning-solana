/**
 * This code was AUTOGENERATED using the Codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun Codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  isProgramError,
  type Address,
  type SOLANA_ERROR__INSTRUCTION_ERROR__CUSTOM,
  type SolanaError,
} from 'gill';
import { VOTING_PROGRAM_ADDRESS } from '../programs';

/** InvalidPollTimestamp: Timestamp for poll is invalid */
export const VOTING_ERROR__INVALID_POLL_TIMESTAMP = 0x1770; // 6000
/** InvalidDescriptionLength: Description should not be empty or more than {MAX_DESCRIPTION_LEN} characters */
export const VOTING_ERROR__INVALID_DESCRIPTION_LENGTH = 0x1771; // 6001
/** InvalidCandidateNameLength: Candidate's name should not be empty or more than {MAX_CANDIDATE_NAME_LEN} characters */
export const VOTING_ERROR__INVALID_CANDIDATE_NAME_LENGTH = 0x1772; // 6002

export type VotingError =
  | typeof VOTING_ERROR__INVALID_CANDIDATE_NAME_LENGTH
  | typeof VOTING_ERROR__INVALID_DESCRIPTION_LENGTH
  | typeof VOTING_ERROR__INVALID_POLL_TIMESTAMP;

let votingErrorMessages: Record<VotingError, string> | undefined;
if (process.env.NODE_ENV !== 'production') {
  votingErrorMessages = {
    [VOTING_ERROR__INVALID_CANDIDATE_NAME_LENGTH]: `Candidate's name should not be empty or more than {MAX_CANDIDATE_NAME_LEN} characters`,
    [VOTING_ERROR__INVALID_DESCRIPTION_LENGTH]: `Description should not be empty or more than {MAX_DESCRIPTION_LEN} characters`,
    [VOTING_ERROR__INVALID_POLL_TIMESTAMP]: `Timestamp for poll is invalid`,
  };
}

export function getVotingErrorMessage(code: VotingError): string {
  if (process.env.NODE_ENV !== 'production') {
    return (votingErrorMessages as Record<VotingError, string>)[code];
  }

  return 'Error message not available in production bundles.';
}

export function isVotingError<TProgramErrorCode extends VotingError>(
  error: unknown,
  transactionMessage: {
    instructions: Record<number, { programAddress: Address }>;
  },
  code?: TProgramErrorCode
): error is SolanaError<typeof SOLANA_ERROR__INSTRUCTION_ERROR__CUSTOM> &
  Readonly<{ context: Readonly<{ code: TProgramErrorCode }> }> {
  return isProgramError<TProgramErrorCode>(
    error,
    transactionMessage,
    VOTING_PROGRAM_ADDRESS,
    code
  );
}
