/**
 * This code was AUTOGENERATED using the Codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun Codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  addDecoderSizePrefix,
  addEncoderSizePrefix,
  assertAccountExists,
  assertAccountsExist,
  combineCodec,
  decodeAccount,
  fetchEncodedAccount,
  fetchEncodedAccounts,
  fixDecoderSize,
  fixEncoderSize,
  getBytesDecoder,
  getBytesEncoder,
  getStructDecoder,
  getStructEncoder,
  getU32Decoder,
  getU32Encoder,
  getU64Decoder,
  getU64Encoder,
  getU8Decoder,
  getU8Encoder,
  getUtf8Decoder,
  getUtf8Encoder,
  transformEncoder,
  type Account,
  type Address,
  type Codec,
  type Decoder,
  type EncodedAccount,
  type Encoder,
  type FetchAccountConfig,
  type FetchAccountsConfig,
  type MaybeAccount,
  type MaybeEncodedAccount,
  type ReadonlyUint8Array,
} from 'gill';

export const POLL_DISCRIMINATOR = new Uint8Array([
  110, 234, 167, 188, 231, 136, 153, 111,
]);

export function getPollDiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 8).encode(POLL_DISCRIMINATOR);
}

export type Poll = {
  discriminator: ReadonlyUint8Array;
  id: bigint;
  description: string;
  startTime: bigint;
  endTime: bigint;
  totalCandidates: bigint;
  bump: number;
};

export type PollArgs = {
  id: number | bigint;
  description: string;
  startTime: number | bigint;
  endTime: number | bigint;
  totalCandidates: number | bigint;
  bump: number;
};

export function getPollEncoder(): Encoder<PollArgs> {
  return transformEncoder(
    getStructEncoder([
      ['discriminator', fixEncoderSize(getBytesEncoder(), 8)],
      ['id', getU64Encoder()],
      ['description', addEncoderSizePrefix(getUtf8Encoder(), getU32Encoder())],
      ['startTime', getU64Encoder()],
      ['endTime', getU64Encoder()],
      ['totalCandidates', getU64Encoder()],
      ['bump', getU8Encoder()],
    ]),
    (value) => ({ ...value, discriminator: POLL_DISCRIMINATOR })
  );
}

export function getPollDecoder(): Decoder<Poll> {
  return getStructDecoder([
    ['discriminator', fixDecoderSize(getBytesDecoder(), 8)],
    ['id', getU64Decoder()],
    ['description', addDecoderSizePrefix(getUtf8Decoder(), getU32Decoder())],
    ['startTime', getU64Decoder()],
    ['endTime', getU64Decoder()],
    ['totalCandidates', getU64Decoder()],
    ['bump', getU8Decoder()],
  ]);
}

export function getPollCodec(): Codec<PollArgs, Poll> {
  return combineCodec(getPollEncoder(), getPollDecoder());
}

export function decodePoll<TAddress extends string = string>(
  encodedAccount: EncodedAccount<TAddress>
): Account<Poll, TAddress>;
export function decodePoll<TAddress extends string = string>(
  encodedAccount: MaybeEncodedAccount<TAddress>
): MaybeAccount<Poll, TAddress>;
export function decodePoll<TAddress extends string = string>(
  encodedAccount: EncodedAccount<TAddress> | MaybeEncodedAccount<TAddress>
): Account<Poll, TAddress> | MaybeAccount<Poll, TAddress> {
  return decodeAccount(
    encodedAccount as MaybeEncodedAccount<TAddress>,
    getPollDecoder()
  );
}

export async function fetchPoll<TAddress extends string = string>(
  rpc: Parameters<typeof fetchEncodedAccount>[0],
  address: Address<TAddress>,
  config?: FetchAccountConfig
): Promise<Account<Poll, TAddress>> {
  const maybeAccount = await fetchMaybePoll(rpc, address, config);
  assertAccountExists(maybeAccount);
  return maybeAccount;
}

export async function fetchMaybePoll<TAddress extends string = string>(
  rpc: Parameters<typeof fetchEncodedAccount>[0],
  address: Address<TAddress>,
  config?: FetchAccountConfig
): Promise<MaybeAccount<Poll, TAddress>> {
  const maybeAccount = await fetchEncodedAccount(rpc, address, config);
  return decodePoll(maybeAccount);
}

export async function fetchAllPoll(
  rpc: Parameters<typeof fetchEncodedAccounts>[0],
  addresses: Array<Address>,
  config?: FetchAccountsConfig
): Promise<Account<Poll>[]> {
  const maybeAccounts = await fetchAllMaybePoll(rpc, addresses, config);
  assertAccountsExist(maybeAccounts);
  return maybeAccounts;
}

export async function fetchAllMaybePoll(
  rpc: Parameters<typeof fetchEncodedAccounts>[0],
  addresses: Array<Address>,
  config?: FetchAccountsConfig
): Promise<MaybeAccount<Poll>[]> {
  const maybeAccounts = await fetchEncodedAccounts(rpc, addresses, config);
  return maybeAccounts.map((maybeAccount) => decodePoll(maybeAccount));
}
